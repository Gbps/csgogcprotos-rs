// This file is generated by rust-protobuf 2.16.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `gcsystemmsgs.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_16_2;

#[derive(PartialEq,Clone,Default)]
pub struct CMsgGCHVacVerificationChange {
    // message fields
    steamid: ::std::option::Option<u64>,
    appid: ::std::option::Option<u32>,
    is_verified: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgGCHVacVerificationChange {
    fn default() -> &'a CMsgGCHVacVerificationChange {
        <CMsgGCHVacVerificationChange as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCHVacVerificationChange {
    pub fn new() -> CMsgGCHVacVerificationChange {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional bool is_verified = 3;


    pub fn get_is_verified(&self) -> bool {
        self.is_verified.unwrap_or(false)
    }
    pub fn clear_is_verified(&mut self) {
        self.is_verified = ::std::option::Option::None;
    }

    pub fn has_is_verified(&self) -> bool {
        self.is_verified.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_verified(&mut self, v: bool) {
        self.is_verified = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgGCHVacVerificationChange {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_verified = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.is_verified {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.is_verified {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgGCHVacVerificationChange {
        CMsgGCHVacVerificationChange::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "steamid",
                |m: &CMsgGCHVacVerificationChange| { &m.steamid },
                |m: &mut CMsgGCHVacVerificationChange| { &mut m.steamid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "appid",
                |m: &CMsgGCHVacVerificationChange| { &m.appid },
                |m: &mut CMsgGCHVacVerificationChange| { &mut m.appid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_verified",
                |m: &CMsgGCHVacVerificationChange| { &m.is_verified },
                |m: &mut CMsgGCHVacVerificationChange| { &mut m.is_verified },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CMsgGCHVacVerificationChange>(
                "CMsgGCHVacVerificationChange",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CMsgGCHVacVerificationChange {
        static instance: ::protobuf::rt::LazyV2<CMsgGCHVacVerificationChange> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CMsgGCHVacVerificationChange::new)
    }
}

impl ::protobuf::Clear for CMsgGCHVacVerificationChange {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.is_verified = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgGCHVacVerificationChange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCHVacVerificationChange {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CMsgGCHAccountPhoneNumberChange {
    // message fields
    steamid: ::std::option::Option<u64>,
    appid: ::std::option::Option<u32>,
    phone_id: ::std::option::Option<u64>,
    is_verified: ::std::option::Option<bool>,
    is_identifying: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgGCHAccountPhoneNumberChange {
    fn default() -> &'a CMsgGCHAccountPhoneNumberChange {
        <CMsgGCHAccountPhoneNumberChange as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCHAccountPhoneNumberChange {
    pub fn new() -> CMsgGCHAccountPhoneNumberChange {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 phone_id = 3;


    pub fn get_phone_id(&self) -> u64 {
        self.phone_id.unwrap_or(0)
    }
    pub fn clear_phone_id(&mut self) {
        self.phone_id = ::std::option::Option::None;
    }

    pub fn has_phone_id(&self) -> bool {
        self.phone_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_phone_id(&mut self, v: u64) {
        self.phone_id = ::std::option::Option::Some(v);
    }

    // optional bool is_verified = 4;


    pub fn get_is_verified(&self) -> bool {
        self.is_verified.unwrap_or(false)
    }
    pub fn clear_is_verified(&mut self) {
        self.is_verified = ::std::option::Option::None;
    }

    pub fn has_is_verified(&self) -> bool {
        self.is_verified.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_verified(&mut self, v: bool) {
        self.is_verified = ::std::option::Option::Some(v);
    }

    // optional bool is_identifying = 5;


    pub fn get_is_identifying(&self) -> bool {
        self.is_identifying.unwrap_or(false)
    }
    pub fn clear_is_identifying(&mut self) {
        self.is_identifying = ::std::option::Option::None;
    }

    pub fn has_is_identifying(&self) -> bool {
        self.is_identifying.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_identifying(&mut self, v: bool) {
        self.is_identifying = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgGCHAccountPhoneNumberChange {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.phone_id = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_verified = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_identifying = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.phone_id {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.is_verified {
            my_size += 2;
        }
        if let Some(v) = self.is_identifying {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.phone_id {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.is_verified {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.is_identifying {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgGCHAccountPhoneNumberChange {
        CMsgGCHAccountPhoneNumberChange::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "steamid",
                |m: &CMsgGCHAccountPhoneNumberChange| { &m.steamid },
                |m: &mut CMsgGCHAccountPhoneNumberChange| { &mut m.steamid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "appid",
                |m: &CMsgGCHAccountPhoneNumberChange| { &m.appid },
                |m: &mut CMsgGCHAccountPhoneNumberChange| { &mut m.appid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "phone_id",
                |m: &CMsgGCHAccountPhoneNumberChange| { &m.phone_id },
                |m: &mut CMsgGCHAccountPhoneNumberChange| { &mut m.phone_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_verified",
                |m: &CMsgGCHAccountPhoneNumberChange| { &m.is_verified },
                |m: &mut CMsgGCHAccountPhoneNumberChange| { &mut m.is_verified },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_identifying",
                |m: &CMsgGCHAccountPhoneNumberChange| { &m.is_identifying },
                |m: &mut CMsgGCHAccountPhoneNumberChange| { &mut m.is_identifying },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CMsgGCHAccountPhoneNumberChange>(
                "CMsgGCHAccountPhoneNumberChange",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CMsgGCHAccountPhoneNumberChange {
        static instance: ::protobuf::rt::LazyV2<CMsgGCHAccountPhoneNumberChange> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CMsgGCHAccountPhoneNumberChange::new)
    }
}

impl ::protobuf::Clear for CMsgGCHAccountPhoneNumberChange {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.phone_id = ::std::option::Option::None;
        self.is_verified = ::std::option::Option::None;
        self.is_identifying = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgGCHAccountPhoneNumberChange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCHAccountPhoneNumberChange {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CMsgGCHInviteUserToLobby {
    // message fields
    steamid: ::std::option::Option<u64>,
    appid: ::std::option::Option<u32>,
    steamid_invited: ::std::option::Option<u64>,
    steamid_lobby: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CMsgGCHInviteUserToLobby {
    fn default() -> &'a CMsgGCHInviteUserToLobby {
        <CMsgGCHInviteUserToLobby as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCHInviteUserToLobby {
    pub fn new() -> CMsgGCHInviteUserToLobby {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid_invited = 3;


    pub fn get_steamid_invited(&self) -> u64 {
        self.steamid_invited.unwrap_or(0)
    }
    pub fn clear_steamid_invited(&mut self) {
        self.steamid_invited = ::std::option::Option::None;
    }

    pub fn has_steamid_invited(&self) -> bool {
        self.steamid_invited.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid_invited(&mut self, v: u64) {
        self.steamid_invited = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid_lobby = 4;


    pub fn get_steamid_lobby(&self) -> u64 {
        self.steamid_lobby.unwrap_or(0)
    }
    pub fn clear_steamid_lobby(&mut self) {
        self.steamid_lobby = ::std::option::Option::None;
    }

    pub fn has_steamid_lobby(&self) -> bool {
        self.steamid_lobby.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid_lobby(&mut self, v: u64) {
        self.steamid_lobby = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CMsgGCHInviteUserToLobby {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid_invited = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.steamid_lobby = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 9;
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.steamid_invited {
            my_size += 9;
        }
        if let Some(v) = self.steamid_lobby {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.steamid_invited {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.steamid_lobby {
            os.write_fixed64(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CMsgGCHInviteUserToLobby {
        CMsgGCHInviteUserToLobby::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "steamid",
                |m: &CMsgGCHInviteUserToLobby| { &m.steamid },
                |m: &mut CMsgGCHInviteUserToLobby| { &mut m.steamid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "appid",
                |m: &CMsgGCHInviteUserToLobby| { &m.appid },
                |m: &mut CMsgGCHInviteUserToLobby| { &mut m.appid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "steamid_invited",
                |m: &CMsgGCHInviteUserToLobby| { &m.steamid_invited },
                |m: &mut CMsgGCHInviteUserToLobby| { &mut m.steamid_invited },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "steamid_lobby",
                |m: &CMsgGCHInviteUserToLobby| { &m.steamid_lobby },
                |m: &mut CMsgGCHInviteUserToLobby| { &mut m.steamid_lobby },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CMsgGCHInviteUserToLobby>(
                "CMsgGCHInviteUserToLobby",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CMsgGCHInviteUserToLobby {
        static instance: ::protobuf::rt::LazyV2<CMsgGCHInviteUserToLobby> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CMsgGCHInviteUserToLobby::new)
    }
}

impl ::protobuf::Clear for CMsgGCHInviteUserToLobby {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.steamid_invited = ::std::option::Option::None;
        self.steamid_lobby = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CMsgGCHInviteUserToLobby {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCHInviteUserToLobby {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CQuest_PublisherAddCommunityItemsToPlayer_Request {
    // message fields
    steamid: ::std::option::Option<u64>,
    appid: ::std::option::Option<u32>,
    match_item_type: ::std::option::Option<u32>,
    match_item_class: ::std::option::Option<u32>,
    prefix_item_name: ::protobuf::SingularField<::std::string::String>,
    pub attributes: ::protobuf::RepeatedField<CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute>,
    note: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CQuest_PublisherAddCommunityItemsToPlayer_Request {
    fn default() -> &'a CQuest_PublisherAddCommunityItemsToPlayer_Request {
        <CQuest_PublisherAddCommunityItemsToPlayer_Request as ::protobuf::Message>::default_instance()
    }
}

impl CQuest_PublisherAddCommunityItemsToPlayer_Request {
    pub fn new() -> CQuest_PublisherAddCommunityItemsToPlayer_Request {
        ::std::default::Default::default()
    }

    // optional uint64 steamid = 1;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 appid = 2;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint32 match_item_type = 3;


    pub fn get_match_item_type(&self) -> u32 {
        self.match_item_type.unwrap_or(0)
    }
    pub fn clear_match_item_type(&mut self) {
        self.match_item_type = ::std::option::Option::None;
    }

    pub fn has_match_item_type(&self) -> bool {
        self.match_item_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_match_item_type(&mut self, v: u32) {
        self.match_item_type = ::std::option::Option::Some(v);
    }

    // optional uint32 match_item_class = 4;


    pub fn get_match_item_class(&self) -> u32 {
        self.match_item_class.unwrap_or(0)
    }
    pub fn clear_match_item_class(&mut self) {
        self.match_item_class = ::std::option::Option::None;
    }

    pub fn has_match_item_class(&self) -> bool {
        self.match_item_class.is_some()
    }

    // Param is passed by value, moved
    pub fn set_match_item_class(&mut self, v: u32) {
        self.match_item_class = ::std::option::Option::Some(v);
    }

    // optional string prefix_item_name = 5;


    pub fn get_prefix_item_name(&self) -> &str {
        match self.prefix_item_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_prefix_item_name(&mut self) {
        self.prefix_item_name.clear();
    }

    pub fn has_prefix_item_name(&self) -> bool {
        self.prefix_item_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prefix_item_name(&mut self, v: ::std::string::String) {
        self.prefix_item_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prefix_item_name(&mut self) -> &mut ::std::string::String {
        if self.prefix_item_name.is_none() {
            self.prefix_item_name.set_default();
        }
        self.prefix_item_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_prefix_item_name(&mut self) -> ::std::string::String {
        self.prefix_item_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute attributes = 6;


    pub fn get_attributes(&self) -> &[CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute] {
        &self.attributes
    }
    pub fn clear_attributes(&mut self) {
        self.attributes.clear();
    }

    // Param is passed by value, moved
    pub fn set_attributes(&mut self, v: ::protobuf::RepeatedField<CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute>) {
        self.attributes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_attributes(&mut self) -> &mut ::protobuf::RepeatedField<CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute> {
        &mut self.attributes
    }

    // Take field
    pub fn take_attributes(&mut self) -> ::protobuf::RepeatedField<CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute> {
        ::std::mem::replace(&mut self.attributes, ::protobuf::RepeatedField::new())
    }

    // optional string note = 7;


    pub fn get_note(&self) -> &str {
        match self.note.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_note(&mut self) {
        self.note.clear();
    }

    pub fn has_note(&self) -> bool {
        self.note.is_some()
    }

    // Param is passed by value, moved
    pub fn set_note(&mut self, v: ::std::string::String) {
        self.note = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_note(&mut self) -> &mut ::std::string::String {
        if self.note.is_none() {
            self.note.set_default();
        }
        self.note.as_mut().unwrap()
    }

    // Take field
    pub fn take_note(&mut self) -> ::std::string::String {
        self.note.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CQuest_PublisherAddCommunityItemsToPlayer_Request {
    fn is_initialized(&self) -> bool {
        for v in &self.attributes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.match_item_type = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.match_item_class = ::std::option::Option::Some(tmp);
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.prefix_item_name)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.attributes)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.note)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.match_item_type {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.match_item_class {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.prefix_item_name.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        for value in &self.attributes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.note.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.steamid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.appid {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.match_item_type {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.match_item_class {
            os.write_uint32(4, v)?;
        }
        if let Some(ref v) = self.prefix_item_name.as_ref() {
            os.write_string(5, &v)?;
        }
        for v in &self.attributes {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.note.as_ref() {
            os.write_string(7, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CQuest_PublisherAddCommunityItemsToPlayer_Request {
        CQuest_PublisherAddCommunityItemsToPlayer_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "steamid",
                |m: &CQuest_PublisherAddCommunityItemsToPlayer_Request| { &m.steamid },
                |m: &mut CQuest_PublisherAddCommunityItemsToPlayer_Request| { &mut m.steamid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "appid",
                |m: &CQuest_PublisherAddCommunityItemsToPlayer_Request| { &m.appid },
                |m: &mut CQuest_PublisherAddCommunityItemsToPlayer_Request| { &mut m.appid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "match_item_type",
                |m: &CQuest_PublisherAddCommunityItemsToPlayer_Request| { &m.match_item_type },
                |m: &mut CQuest_PublisherAddCommunityItemsToPlayer_Request| { &mut m.match_item_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "match_item_class",
                |m: &CQuest_PublisherAddCommunityItemsToPlayer_Request| { &m.match_item_class },
                |m: &mut CQuest_PublisherAddCommunityItemsToPlayer_Request| { &mut m.match_item_class },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "prefix_item_name",
                |m: &CQuest_PublisherAddCommunityItemsToPlayer_Request| { &m.prefix_item_name },
                |m: &mut CQuest_PublisherAddCommunityItemsToPlayer_Request| { &mut m.prefix_item_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute>>(
                "attributes",
                |m: &CQuest_PublisherAddCommunityItemsToPlayer_Request| { &m.attributes },
                |m: &mut CQuest_PublisherAddCommunityItemsToPlayer_Request| { &mut m.attributes },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "note",
                |m: &CQuest_PublisherAddCommunityItemsToPlayer_Request| { &m.note },
                |m: &mut CQuest_PublisherAddCommunityItemsToPlayer_Request| { &mut m.note },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CQuest_PublisherAddCommunityItemsToPlayer_Request>(
                "CQuest_PublisherAddCommunityItemsToPlayer_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CQuest_PublisherAddCommunityItemsToPlayer_Request {
        static instance: ::protobuf::rt::LazyV2<CQuest_PublisherAddCommunityItemsToPlayer_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CQuest_PublisherAddCommunityItemsToPlayer_Request::new)
    }
}

impl ::protobuf::Clear for CQuest_PublisherAddCommunityItemsToPlayer_Request {
    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.appid = ::std::option::Option::None;
        self.match_item_type = ::std::option::Option::None;
        self.match_item_class = ::std::option::Option::None;
        self.prefix_item_name.clear();
        self.attributes.clear();
        self.note.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CQuest_PublisherAddCommunityItemsToPlayer_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CQuest_PublisherAddCommunityItemsToPlayer_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute {
    // message fields
    attribute: ::std::option::Option<u32>,
    value: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute {
    fn default() -> &'a CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute {
        <CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute as ::protobuf::Message>::default_instance()
    }
}

impl CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute {
    pub fn new() -> CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute {
        ::std::default::Default::default()
    }

    // optional uint32 attribute = 1;


    pub fn get_attribute(&self) -> u32 {
        self.attribute.unwrap_or(0)
    }
    pub fn clear_attribute(&mut self) {
        self.attribute = ::std::option::Option::None;
    }

    pub fn has_attribute(&self) -> bool {
        self.attribute.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attribute(&mut self, v: u32) {
        self.attribute = ::std::option::Option::Some(v);
    }

    // optional uint64 value = 2;


    pub fn get_value(&self) -> u64 {
        self.value.unwrap_or(0)
    }
    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: u64) {
        self.value = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.attribute = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.value = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.attribute {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.value {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.attribute {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.value {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute {
        CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "attribute",
                |m: &CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute| { &m.attribute },
                |m: &mut CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute| { &mut m.attribute },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "value",
                |m: &CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute| { &m.value },
                |m: &mut CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute>(
                "CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute {
        static instance: ::protobuf::rt::LazyV2<CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::new)
    }
}

impl ::protobuf::Clear for CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute {
    fn clear(&mut self) {
        self.attribute = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CQuest_PublisherAddCommunityItemsToPlayer_Response {
    // message fields
    items_matched: ::std::option::Option<u32>,
    items_granted: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CQuest_PublisherAddCommunityItemsToPlayer_Response {
    fn default() -> &'a CQuest_PublisherAddCommunityItemsToPlayer_Response {
        <CQuest_PublisherAddCommunityItemsToPlayer_Response as ::protobuf::Message>::default_instance()
    }
}

impl CQuest_PublisherAddCommunityItemsToPlayer_Response {
    pub fn new() -> CQuest_PublisherAddCommunityItemsToPlayer_Response {
        ::std::default::Default::default()
    }

    // optional uint32 items_matched = 1;


    pub fn get_items_matched(&self) -> u32 {
        self.items_matched.unwrap_or(0)
    }
    pub fn clear_items_matched(&mut self) {
        self.items_matched = ::std::option::Option::None;
    }

    pub fn has_items_matched(&self) -> bool {
        self.items_matched.is_some()
    }

    // Param is passed by value, moved
    pub fn set_items_matched(&mut self, v: u32) {
        self.items_matched = ::std::option::Option::Some(v);
    }

    // optional uint32 items_granted = 2;


    pub fn get_items_granted(&self) -> u32 {
        self.items_granted.unwrap_or(0)
    }
    pub fn clear_items_granted(&mut self) {
        self.items_granted = ::std::option::Option::None;
    }

    pub fn has_items_granted(&self) -> bool {
        self.items_granted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_items_granted(&mut self, v: u32) {
        self.items_granted = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CQuest_PublisherAddCommunityItemsToPlayer_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.items_matched = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.items_granted = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.items_matched {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.items_granted {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.items_matched {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.items_granted {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CQuest_PublisherAddCommunityItemsToPlayer_Response {
        CQuest_PublisherAddCommunityItemsToPlayer_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "items_matched",
                |m: &CQuest_PublisherAddCommunityItemsToPlayer_Response| { &m.items_matched },
                |m: &mut CQuest_PublisherAddCommunityItemsToPlayer_Response| { &mut m.items_matched },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "items_granted",
                |m: &CQuest_PublisherAddCommunityItemsToPlayer_Response| { &m.items_granted },
                |m: &mut CQuest_PublisherAddCommunityItemsToPlayer_Response| { &mut m.items_granted },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CQuest_PublisherAddCommunityItemsToPlayer_Response>(
                "CQuest_PublisherAddCommunityItemsToPlayer_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CQuest_PublisherAddCommunityItemsToPlayer_Response {
        static instance: ::protobuf::rt::LazyV2<CQuest_PublisherAddCommunityItemsToPlayer_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CQuest_PublisherAddCommunityItemsToPlayer_Response::new)
    }
}

impl ::protobuf::Clear for CQuest_PublisherAddCommunityItemsToPlayer_Response {
    fn clear(&mut self) {
        self.items_matched = ::std::option::Option::None;
        self.items_granted = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CQuest_PublisherAddCommunityItemsToPlayer_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CQuest_PublisherAddCommunityItemsToPlayer_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CCommunity_GamePersonalDataCategoryInfo {
    // message fields
    field_type: ::protobuf::SingularField<::std::string::String>,
    localization_token: ::protobuf::SingularField<::std::string::String>,
    template_file: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCommunity_GamePersonalDataCategoryInfo {
    fn default() -> &'a CCommunity_GamePersonalDataCategoryInfo {
        <CCommunity_GamePersonalDataCategoryInfo as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GamePersonalDataCategoryInfo {
    pub fn new() -> CCommunity_GamePersonalDataCategoryInfo {
        ::std::default::Default::default()
    }

    // optional string type = 1;


    pub fn get_field_type(&self) -> &str {
        match self.field_type.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        if self.field_type.is_none() {
            self.field_type.set_default();
        }
        self.field_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        self.field_type.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string localization_token = 2;


    pub fn get_localization_token(&self) -> &str {
        match self.localization_token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_localization_token(&mut self) {
        self.localization_token.clear();
    }

    pub fn has_localization_token(&self) -> bool {
        self.localization_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_localization_token(&mut self, v: ::std::string::String) {
        self.localization_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_localization_token(&mut self) -> &mut ::std::string::String {
        if self.localization_token.is_none() {
            self.localization_token.set_default();
        }
        self.localization_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_localization_token(&mut self) -> ::std::string::String {
        self.localization_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string template_file = 3;


    pub fn get_template_file(&self) -> &str {
        match self.template_file.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_template_file(&mut self) {
        self.template_file.clear();
    }

    pub fn has_template_file(&self) -> bool {
        self.template_file.is_some()
    }

    // Param is passed by value, moved
    pub fn set_template_file(&mut self, v: ::std::string::String) {
        self.template_file = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_template_file(&mut self) -> &mut ::std::string::String {
        if self.template_file.is_none() {
            self.template_file.set_default();
        }
        self.template_file.as_mut().unwrap()
    }

    // Take field
    pub fn take_template_file(&mut self) -> ::std::string::String {
        self.template_file.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CCommunity_GamePersonalDataCategoryInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.localization_token)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.template_file)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.field_type.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.localization_token.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.template_file.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.field_type.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.localization_token.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.template_file.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCommunity_GamePersonalDataCategoryInfo {
        CCommunity_GamePersonalDataCategoryInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &CCommunity_GamePersonalDataCategoryInfo| { &m.field_type },
                |m: &mut CCommunity_GamePersonalDataCategoryInfo| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "localization_token",
                |m: &CCommunity_GamePersonalDataCategoryInfo| { &m.localization_token },
                |m: &mut CCommunity_GamePersonalDataCategoryInfo| { &mut m.localization_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "template_file",
                |m: &CCommunity_GamePersonalDataCategoryInfo| { &m.template_file },
                |m: &mut CCommunity_GamePersonalDataCategoryInfo| { &mut m.template_file },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCommunity_GamePersonalDataCategoryInfo>(
                "CCommunity_GamePersonalDataCategoryInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCommunity_GamePersonalDataCategoryInfo {
        static instance: ::protobuf::rt::LazyV2<CCommunity_GamePersonalDataCategoryInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCommunity_GamePersonalDataCategoryInfo::new)
    }
}

impl ::protobuf::Clear for CCommunity_GamePersonalDataCategoryInfo {
    fn clear(&mut self) {
        self.field_type.clear();
        self.localization_token.clear();
        self.template_file.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCommunity_GamePersonalDataCategoryInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GamePersonalDataCategoryInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CCommunity_GetGamePersonalDataCategories_Request {
    // message fields
    appid: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetGamePersonalDataCategories_Request {
    fn default() -> &'a CCommunity_GetGamePersonalDataCategories_Request {
        <CCommunity_GetGamePersonalDataCategories_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetGamePersonalDataCategories_Request {
    pub fn new() -> CCommunity_GetGamePersonalDataCategories_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CCommunity_GetGamePersonalDataCategories_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCommunity_GetGamePersonalDataCategories_Request {
        CCommunity_GetGamePersonalDataCategories_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "appid",
                |m: &CCommunity_GetGamePersonalDataCategories_Request| { &m.appid },
                |m: &mut CCommunity_GetGamePersonalDataCategories_Request| { &mut m.appid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCommunity_GetGamePersonalDataCategories_Request>(
                "CCommunity_GetGamePersonalDataCategories_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCommunity_GetGamePersonalDataCategories_Request {
        static instance: ::protobuf::rt::LazyV2<CCommunity_GetGamePersonalDataCategories_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCommunity_GetGamePersonalDataCategories_Request::new)
    }
}

impl ::protobuf::Clear for CCommunity_GetGamePersonalDataCategories_Request {
    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCommunity_GetGamePersonalDataCategories_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetGamePersonalDataCategories_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CCommunity_GetGamePersonalDataCategories_Response {
    // message fields
    pub categories: ::protobuf::RepeatedField<CCommunity_GamePersonalDataCategoryInfo>,
    app_assets_basename: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetGamePersonalDataCategories_Response {
    fn default() -> &'a CCommunity_GetGamePersonalDataCategories_Response {
        <CCommunity_GetGamePersonalDataCategories_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetGamePersonalDataCategories_Response {
    pub fn new() -> CCommunity_GetGamePersonalDataCategories_Response {
        ::std::default::Default::default()
    }

    // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;


    pub fn get_categories(&self) -> &[CCommunity_GamePersonalDataCategoryInfo] {
        &self.categories
    }
    pub fn clear_categories(&mut self) {
        self.categories.clear();
    }

    // Param is passed by value, moved
    pub fn set_categories(&mut self, v: ::protobuf::RepeatedField<CCommunity_GamePersonalDataCategoryInfo>) {
        self.categories = v;
    }

    // Mutable pointer to the field.
    pub fn mut_categories(&mut self) -> &mut ::protobuf::RepeatedField<CCommunity_GamePersonalDataCategoryInfo> {
        &mut self.categories
    }

    // Take field
    pub fn take_categories(&mut self) -> ::protobuf::RepeatedField<CCommunity_GamePersonalDataCategoryInfo> {
        ::std::mem::replace(&mut self.categories, ::protobuf::RepeatedField::new())
    }

    // optional string app_assets_basename = 2;


    pub fn get_app_assets_basename(&self) -> &str {
        match self.app_assets_basename.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_app_assets_basename(&mut self) {
        self.app_assets_basename.clear();
    }

    pub fn has_app_assets_basename(&self) -> bool {
        self.app_assets_basename.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_assets_basename(&mut self, v: ::std::string::String) {
        self.app_assets_basename = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app_assets_basename(&mut self) -> &mut ::std::string::String {
        if self.app_assets_basename.is_none() {
            self.app_assets_basename.set_default();
        }
        self.app_assets_basename.as_mut().unwrap()
    }

    // Take field
    pub fn take_app_assets_basename(&mut self) -> ::std::string::String {
        self.app_assets_basename.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CCommunity_GetGamePersonalDataCategories_Response {
    fn is_initialized(&self) -> bool {
        for v in &self.categories {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.categories)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.app_assets_basename)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.categories {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.app_assets_basename.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.categories {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.app_assets_basename.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCommunity_GetGamePersonalDataCategories_Response {
        CCommunity_GetGamePersonalDataCategories_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CCommunity_GamePersonalDataCategoryInfo>>(
                "categories",
                |m: &CCommunity_GetGamePersonalDataCategories_Response| { &m.categories },
                |m: &mut CCommunity_GetGamePersonalDataCategories_Response| { &mut m.categories },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "app_assets_basename",
                |m: &CCommunity_GetGamePersonalDataCategories_Response| { &m.app_assets_basename },
                |m: &mut CCommunity_GetGamePersonalDataCategories_Response| { &mut m.app_assets_basename },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCommunity_GetGamePersonalDataCategories_Response>(
                "CCommunity_GetGamePersonalDataCategories_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCommunity_GetGamePersonalDataCategories_Response {
        static instance: ::protobuf::rt::LazyV2<CCommunity_GetGamePersonalDataCategories_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCommunity_GetGamePersonalDataCategories_Response::new)
    }
}

impl ::protobuf::Clear for CCommunity_GetGamePersonalDataCategories_Response {
    fn clear(&mut self) {
        self.categories.clear();
        self.app_assets_basename.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCommunity_GetGamePersonalDataCategories_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetGamePersonalDataCategories_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CCommunity_GetGamePersonalDataEntries_Request {
    // message fields
    appid: ::std::option::Option<u32>,
    steamid: ::std::option::Option<u64>,
    field_type: ::protobuf::SingularField<::std::string::String>,
    continue_token: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetGamePersonalDataEntries_Request {
    fn default() -> &'a CCommunity_GetGamePersonalDataEntries_Request {
        <CCommunity_GetGamePersonalDataEntries_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetGamePersonalDataEntries_Request {
    pub fn new() -> CCommunity_GetGamePersonalDataEntries_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 steamid = 2;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional string type = 3;


    pub fn get_field_type(&self) -> &str {
        match self.field_type.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        if self.field_type.is_none() {
            self.field_type.set_default();
        }
        self.field_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        self.field_type.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string continue_token = 4;


    pub fn get_continue_token(&self) -> &str {
        match self.continue_token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_continue_token(&mut self) {
        self.continue_token.clear();
    }

    pub fn has_continue_token(&self) -> bool {
        self.continue_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_continue_token(&mut self, v: ::std::string::String) {
        self.continue_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_continue_token(&mut self) -> &mut ::std::string::String {
        if self.continue_token.is_none() {
            self.continue_token.set_default();
        }
        self.continue_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_continue_token(&mut self) -> ::std::string::String {
        self.continue_token.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CCommunity_GetGamePersonalDataEntries_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.field_type)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.continue_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.steamid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.field_type.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.continue_token.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_uint64(2, v)?;
        }
        if let Some(ref v) = self.field_type.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.continue_token.as_ref() {
            os.write_string(4, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCommunity_GetGamePersonalDataEntries_Request {
        CCommunity_GetGamePersonalDataEntries_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "appid",
                |m: &CCommunity_GetGamePersonalDataEntries_Request| { &m.appid },
                |m: &mut CCommunity_GetGamePersonalDataEntries_Request| { &mut m.appid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "steamid",
                |m: &CCommunity_GetGamePersonalDataEntries_Request| { &m.steamid },
                |m: &mut CCommunity_GetGamePersonalDataEntries_Request| { &mut m.steamid },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &CCommunity_GetGamePersonalDataEntries_Request| { &m.field_type },
                |m: &mut CCommunity_GetGamePersonalDataEntries_Request| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "continue_token",
                |m: &CCommunity_GetGamePersonalDataEntries_Request| { &m.continue_token },
                |m: &mut CCommunity_GetGamePersonalDataEntries_Request| { &mut m.continue_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCommunity_GetGamePersonalDataEntries_Request>(
                "CCommunity_GetGamePersonalDataEntries_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCommunity_GetGamePersonalDataEntries_Request {
        static instance: ::protobuf::rt::LazyV2<CCommunity_GetGamePersonalDataEntries_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCommunity_GetGamePersonalDataEntries_Request::new)
    }
}

impl ::protobuf::Clear for CCommunity_GetGamePersonalDataEntries_Request {
    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.field_type.clear();
        self.continue_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCommunity_GetGamePersonalDataEntries_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetGamePersonalDataEntries_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CCommunity_GetGamePersonalDataEntries_Response {
    // message fields
    gceresult: ::std::option::Option<u32>,
    pub entries: ::protobuf::RepeatedField<::std::string::String>,
    continue_token: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCommunity_GetGamePersonalDataEntries_Response {
    fn default() -> &'a CCommunity_GetGamePersonalDataEntries_Response {
        <CCommunity_GetGamePersonalDataEntries_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_GetGamePersonalDataEntries_Response {
    pub fn new() -> CCommunity_GetGamePersonalDataEntries_Response {
        ::std::default::Default::default()
    }

    // optional uint32 gceresult = 1;


    pub fn get_gceresult(&self) -> u32 {
        self.gceresult.unwrap_or(0)
    }
    pub fn clear_gceresult(&mut self) {
        self.gceresult = ::std::option::Option::None;
    }

    pub fn has_gceresult(&self) -> bool {
        self.gceresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gceresult(&mut self, v: u32) {
        self.gceresult = ::std::option::Option::Some(v);
    }

    // repeated string entries = 2;


    pub fn get_entries(&self) -> &[::std::string::String] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }

    // optional string continue_token = 3;


    pub fn get_continue_token(&self) -> &str {
        match self.continue_token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_continue_token(&mut self) {
        self.continue_token.clear();
    }

    pub fn has_continue_token(&self) -> bool {
        self.continue_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_continue_token(&mut self, v: ::std::string::String) {
        self.continue_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_continue_token(&mut self) -> &mut ::std::string::String {
        if self.continue_token.is_none() {
            self.continue_token.set_default();
        }
        self.continue_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_continue_token(&mut self) -> ::std::string::String {
        self.continue_token.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CCommunity_GetGamePersonalDataEntries_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.gceresult = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.entries)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.continue_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.gceresult {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.entries {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if let Some(ref v) = self.continue_token.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.gceresult {
            os.write_uint32(1, v)?;
        }
        for v in &self.entries {
            os.write_string(2, &v)?;
        };
        if let Some(ref v) = self.continue_token.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCommunity_GetGamePersonalDataEntries_Response {
        CCommunity_GetGamePersonalDataEntries_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "gceresult",
                |m: &CCommunity_GetGamePersonalDataEntries_Response| { &m.gceresult },
                |m: &mut CCommunity_GetGamePersonalDataEntries_Response| { &mut m.gceresult },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "entries",
                |m: &CCommunity_GetGamePersonalDataEntries_Response| { &m.entries },
                |m: &mut CCommunity_GetGamePersonalDataEntries_Response| { &mut m.entries },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "continue_token",
                |m: &CCommunity_GetGamePersonalDataEntries_Response| { &m.continue_token },
                |m: &mut CCommunity_GetGamePersonalDataEntries_Response| { &mut m.continue_token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCommunity_GetGamePersonalDataEntries_Response>(
                "CCommunity_GetGamePersonalDataEntries_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCommunity_GetGamePersonalDataEntries_Response {
        static instance: ::protobuf::rt::LazyV2<CCommunity_GetGamePersonalDataEntries_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCommunity_GetGamePersonalDataEntries_Response::new)
    }
}

impl ::protobuf::Clear for CCommunity_GetGamePersonalDataEntries_Response {
    fn clear(&mut self) {
        self.gceresult = ::std::option::Option::None;
        self.entries.clear();
        self.continue_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCommunity_GetGamePersonalDataEntries_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_GetGamePersonalDataEntries_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CCommunity_TerminateGamePersonalDataEntries_Request {
    // message fields
    appid: ::std::option::Option<u32>,
    steamid: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCommunity_TerminateGamePersonalDataEntries_Request {
    fn default() -> &'a CCommunity_TerminateGamePersonalDataEntries_Request {
        <CCommunity_TerminateGamePersonalDataEntries_Request as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_TerminateGamePersonalDataEntries_Request {
    pub fn new() -> CCommunity_TerminateGamePersonalDataEntries_Request {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;


    pub fn get_appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }
    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional uint64 steamid = 2;


    pub fn get_steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }
    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CCommunity_TerminateGamePersonalDataEntries_Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.appid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.steamid = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.steamid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCommunity_TerminateGamePersonalDataEntries_Request {
        CCommunity_TerminateGamePersonalDataEntries_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "appid",
                |m: &CCommunity_TerminateGamePersonalDataEntries_Request| { &m.appid },
                |m: &mut CCommunity_TerminateGamePersonalDataEntries_Request| { &mut m.appid },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "steamid",
                |m: &CCommunity_TerminateGamePersonalDataEntries_Request| { &m.steamid },
                |m: &mut CCommunity_TerminateGamePersonalDataEntries_Request| { &mut m.steamid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCommunity_TerminateGamePersonalDataEntries_Request>(
                "CCommunity_TerminateGamePersonalDataEntries_Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCommunity_TerminateGamePersonalDataEntries_Request {
        static instance: ::protobuf::rt::LazyV2<CCommunity_TerminateGamePersonalDataEntries_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCommunity_TerminateGamePersonalDataEntries_Request::new)
    }
}

impl ::protobuf::Clear for CCommunity_TerminateGamePersonalDataEntries_Request {
    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCommunity_TerminateGamePersonalDataEntries_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_TerminateGamePersonalDataEntries_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CCommunity_TerminateGamePersonalDataEntries_Response {
    // message fields
    gceresult: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CCommunity_TerminateGamePersonalDataEntries_Response {
    fn default() -> &'a CCommunity_TerminateGamePersonalDataEntries_Response {
        <CCommunity_TerminateGamePersonalDataEntries_Response as ::protobuf::Message>::default_instance()
    }
}

impl CCommunity_TerminateGamePersonalDataEntries_Response {
    pub fn new() -> CCommunity_TerminateGamePersonalDataEntries_Response {
        ::std::default::Default::default()
    }

    // optional uint32 gceresult = 1;


    pub fn get_gceresult(&self) -> u32 {
        self.gceresult.unwrap_or(0)
    }
    pub fn clear_gceresult(&mut self) {
        self.gceresult = ::std::option::Option::None;
    }

    pub fn has_gceresult(&self) -> bool {
        self.gceresult.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gceresult(&mut self, v: u32) {
        self.gceresult = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CCommunity_TerminateGamePersonalDataEntries_Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.gceresult = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.gceresult {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.gceresult {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CCommunity_TerminateGamePersonalDataEntries_Response {
        CCommunity_TerminateGamePersonalDataEntries_Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "gceresult",
                |m: &CCommunity_TerminateGamePersonalDataEntries_Response| { &m.gceresult },
                |m: &mut CCommunity_TerminateGamePersonalDataEntries_Response| { &mut m.gceresult },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CCommunity_TerminateGamePersonalDataEntries_Response>(
                "CCommunity_TerminateGamePersonalDataEntries_Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CCommunity_TerminateGamePersonalDataEntries_Response {
        static instance: ::protobuf::rt::LazyV2<CCommunity_TerminateGamePersonalDataEntries_Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CCommunity_TerminateGamePersonalDataEntries_Response::new)
    }
}

impl ::protobuf::Clear for CCommunity_TerminateGamePersonalDataEntries_Response {
    fn clear(&mut self) {
        self.gceresult = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CCommunity_TerminateGamePersonalDataEntries_Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CCommunity_TerminateGamePersonalDataEntries_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EGCSystemMsg {
    k_EGCMsgInvalid = 0,
    k_EGCMsgMulti = 1,
    k_EGCMsgGenericReply = 10,
    k_EGCMsgSystemBase = 50,
    k_EGCMsgAchievementAwarded = 51,
    k_EGCMsgConCommand = 52,
    k_EGCMsgStartPlaying = 53,
    k_EGCMsgStopPlaying = 54,
    k_EGCMsgStartGameserver = 55,
    k_EGCMsgStopGameserver = 56,
    k_EGCMsgWGRequest = 57,
    k_EGCMsgWGResponse = 58,
    k_EGCMsgGetUserGameStatsSchema = 59,
    k_EGCMsgGetUserGameStatsSchemaResponse = 60,
    k_EGCMsgGetUserStatsDEPRECATED = 61,
    k_EGCMsgGetUserStatsResponse = 62,
    k_EGCMsgAppInfoUpdated = 63,
    k_EGCMsgValidateSession = 64,
    k_EGCMsgValidateSessionResponse = 65,
    k_EGCMsgLookupAccountFromInput = 66,
    k_EGCMsgSendHTTPRequest = 67,
    k_EGCMsgSendHTTPRequestResponse = 68,
    k_EGCMsgPreTestSetup = 69,
    k_EGCMsgRecordSupportAction = 70,
    k_EGCMsgGetAccountDetails_DEPRECATED = 71,
    k_EGCMsgReceiveInterAppMessage = 73,
    k_EGCMsgFindAccounts = 74,
    k_EGCMsgPostAlert = 75,
    k_EGCMsgGetLicenses = 76,
    k_EGCMsgGetUserStats = 77,
    k_EGCMsgGetCommands = 78,
    k_EGCMsgGetCommandsResponse = 79,
    k_EGCMsgAddFreeLicense = 80,
    k_EGCMsgAddFreeLicenseResponse = 81,
    k_EGCMsgGetIPLocation = 82,
    k_EGCMsgGetIPLocationResponse = 83,
    k_EGCMsgSystemStatsSchema = 84,
    k_EGCMsgGetSystemStats = 85,
    k_EGCMsgGetSystemStatsResponse = 86,
    k_EGCMsgSendEmail = 87,
    k_EGCMsgSendEmailResponse = 88,
    k_EGCMsgGetEmailTemplate = 89,
    k_EGCMsgGetEmailTemplateResponse = 90,
    k_EGCMsgGrantGuestPass = 91,
    k_EGCMsgGrantGuestPassResponse = 92,
    k_EGCMsgGetAccountDetails = 93,
    k_EGCMsgGetAccountDetailsResponse = 94,
    k_EGCMsgGetPersonaNames = 95,
    k_EGCMsgGetPersonaNamesResponse = 96,
    k_EGCMsgMultiplexMsg = 97,
    k_EGCMsgMultiplexMsgResponse = 98,
    k_EGCMsgWebAPIRegisterInterfaces = 101,
    k_EGCMsgWebAPIJobRequest = 102,
    k_EGCMsgWebAPIJobRequestHttpResponse = 104,
    k_EGCMsgWebAPIJobRequestForwardResponse = 105,
    k_EGCMsgMemCachedGet = 200,
    k_EGCMsgMemCachedGetResponse = 201,
    k_EGCMsgMemCachedSet = 202,
    k_EGCMsgMemCachedDelete = 203,
    k_EGCMsgMemCachedStats = 204,
    k_EGCMsgMemCachedStatsResponse = 205,
    k_EGCMsgMasterSetDirectory = 220,
    k_EGCMsgMasterSetDirectoryResponse = 221,
    k_EGCMsgMasterSetWebAPIRouting = 222,
    k_EGCMsgMasterSetWebAPIRoutingResponse = 223,
    k_EGCMsgMasterSetClientMsgRouting = 224,
    k_EGCMsgMasterSetClientMsgRoutingResponse = 225,
    k_EGCMsgSetOptions = 226,
    k_EGCMsgSetOptionsResponse = 227,
    k_EGCMsgSystemBase2 = 500,
    k_EGCMsgGetPurchaseTrustStatus = 501,
    k_EGCMsgGetPurchaseTrustStatusResponse = 502,
    k_EGCMsgUpdateSession = 503,
    k_EGCMsgGCAccountVacStatusChange = 504,
    k_EGCMsgCheckFriendship = 505,
    k_EGCMsgCheckFriendshipResponse = 506,
    k_EGCMsgGetPartnerAccountLink = 507,
    k_EGCMsgGetPartnerAccountLinkResponse = 508,
    k_EGCMsgDPPartnerMicroTxns = 512,
    k_EGCMsgDPPartnerMicroTxnsResponse = 513,
    k_EGCMsgVacVerificationChange = 518,
    k_EGCMsgAccountPhoneNumberChange = 519,
    k_EGCMsgInviteUserToLobby = 523,
    k_EGCMsgGetGamePersonalDataCategoriesRequest = 524,
    k_EGCMsgGetGamePersonalDataCategoriesResponse = 525,
    k_EGCMsgGetGamePersonalDataEntriesRequest = 526,
    k_EGCMsgGetGamePersonalDataEntriesResponse = 527,
    k_EGCMsgTerminateGamePersonalDataEntriesRequest = 528,
    k_EGCMsgTerminateGamePersonalDataEntriesResponse = 529,
}

impl ::protobuf::ProtobufEnum for EGCSystemMsg {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCSystemMsg> {
        match value {
            0 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgInvalid),
            1 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMulti),
            10 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGenericReply),
            50 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSystemBase),
            51 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAchievementAwarded),
            52 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgConCommand),
            53 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStartPlaying),
            54 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStopPlaying),
            55 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStartGameserver),
            56 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgStopGameserver),
            57 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWGRequest),
            58 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWGResponse),
            59 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserGameStatsSchema),
            60 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserGameStatsSchemaResponse),
            61 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserStatsDEPRECATED),
            62 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserStatsResponse),
            63 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAppInfoUpdated),
            64 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgValidateSession),
            65 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgValidateSessionResponse),
            66 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgLookupAccountFromInput),
            67 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendHTTPRequest),
            68 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendHTTPRequestResponse),
            69 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgPreTestSetup),
            70 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgRecordSupportAction),
            71 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAccountDetails_DEPRECATED),
            73 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgReceiveInterAppMessage),
            74 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgFindAccounts),
            75 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgPostAlert),
            76 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetLicenses),
            77 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetUserStats),
            78 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetCommands),
            79 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetCommandsResponse),
            80 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAddFreeLicense),
            81 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAddFreeLicenseResponse),
            82 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPLocation),
            83 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetIPLocationResponse),
            84 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSystemStatsSchema),
            85 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetSystemStats),
            86 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetSystemStatsResponse),
            87 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendEmail),
            88 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSendEmailResponse),
            89 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetEmailTemplate),
            90 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetEmailTemplateResponse),
            91 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGrantGuestPass),
            92 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGrantGuestPassResponse),
            93 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAccountDetails),
            94 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetAccountDetailsResponse),
            95 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPersonaNames),
            96 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPersonaNamesResponse),
            97 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMultiplexMsg),
            98 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMultiplexMsgResponse),
            101 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIRegisterInterfaces),
            102 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIJobRequest),
            104 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIJobRequestHttpResponse),
            105 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgWebAPIJobRequestForwardResponse),
            200 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedGet),
            201 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedGetResponse),
            202 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedSet),
            203 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedDelete),
            204 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedStats),
            205 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMemCachedStatsResponse),
            220 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetDirectory),
            221 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetDirectoryResponse),
            222 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetWebAPIRouting),
            223 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetWebAPIRoutingResponse),
            224 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetClientMsgRouting),
            225 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgMasterSetClientMsgRoutingResponse),
            226 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSetOptions),
            227 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSetOptionsResponse),
            500 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgSystemBase2),
            501 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatus),
            502 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatusResponse),
            503 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgUpdateSession),
            504 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGCAccountVacStatusChange),
            505 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckFriendship),
            506 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgCheckFriendshipResponse),
            507 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPartnerAccountLink),
            508 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetPartnerAccountLinkResponse),
            512 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgDPPartnerMicroTxns),
            513 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgDPPartnerMicroTxnsResponse),
            518 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgVacVerificationChange),
            519 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgAccountPhoneNumberChange),
            523 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgInviteUserToLobby),
            524 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesRequest),
            525 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesResponse),
            526 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesRequest),
            527 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesResponse),
            528 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesRequest),
            529 => ::std::option::Option::Some(EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesResponse),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EGCSystemMsg] = &[
            EGCSystemMsg::k_EGCMsgInvalid,
            EGCSystemMsg::k_EGCMsgMulti,
            EGCSystemMsg::k_EGCMsgGenericReply,
            EGCSystemMsg::k_EGCMsgSystemBase,
            EGCSystemMsg::k_EGCMsgAchievementAwarded,
            EGCSystemMsg::k_EGCMsgConCommand,
            EGCSystemMsg::k_EGCMsgStartPlaying,
            EGCSystemMsg::k_EGCMsgStopPlaying,
            EGCSystemMsg::k_EGCMsgStartGameserver,
            EGCSystemMsg::k_EGCMsgStopGameserver,
            EGCSystemMsg::k_EGCMsgWGRequest,
            EGCSystemMsg::k_EGCMsgWGResponse,
            EGCSystemMsg::k_EGCMsgGetUserGameStatsSchema,
            EGCSystemMsg::k_EGCMsgGetUserGameStatsSchemaResponse,
            EGCSystemMsg::k_EGCMsgGetUserStatsDEPRECATED,
            EGCSystemMsg::k_EGCMsgGetUserStatsResponse,
            EGCSystemMsg::k_EGCMsgAppInfoUpdated,
            EGCSystemMsg::k_EGCMsgValidateSession,
            EGCSystemMsg::k_EGCMsgValidateSessionResponse,
            EGCSystemMsg::k_EGCMsgLookupAccountFromInput,
            EGCSystemMsg::k_EGCMsgSendHTTPRequest,
            EGCSystemMsg::k_EGCMsgSendHTTPRequestResponse,
            EGCSystemMsg::k_EGCMsgPreTestSetup,
            EGCSystemMsg::k_EGCMsgRecordSupportAction,
            EGCSystemMsg::k_EGCMsgGetAccountDetails_DEPRECATED,
            EGCSystemMsg::k_EGCMsgReceiveInterAppMessage,
            EGCSystemMsg::k_EGCMsgFindAccounts,
            EGCSystemMsg::k_EGCMsgPostAlert,
            EGCSystemMsg::k_EGCMsgGetLicenses,
            EGCSystemMsg::k_EGCMsgGetUserStats,
            EGCSystemMsg::k_EGCMsgGetCommands,
            EGCSystemMsg::k_EGCMsgGetCommandsResponse,
            EGCSystemMsg::k_EGCMsgAddFreeLicense,
            EGCSystemMsg::k_EGCMsgAddFreeLicenseResponse,
            EGCSystemMsg::k_EGCMsgGetIPLocation,
            EGCSystemMsg::k_EGCMsgGetIPLocationResponse,
            EGCSystemMsg::k_EGCMsgSystemStatsSchema,
            EGCSystemMsg::k_EGCMsgGetSystemStats,
            EGCSystemMsg::k_EGCMsgGetSystemStatsResponse,
            EGCSystemMsg::k_EGCMsgSendEmail,
            EGCSystemMsg::k_EGCMsgSendEmailResponse,
            EGCSystemMsg::k_EGCMsgGetEmailTemplate,
            EGCSystemMsg::k_EGCMsgGetEmailTemplateResponse,
            EGCSystemMsg::k_EGCMsgGrantGuestPass,
            EGCSystemMsg::k_EGCMsgGrantGuestPassResponse,
            EGCSystemMsg::k_EGCMsgGetAccountDetails,
            EGCSystemMsg::k_EGCMsgGetAccountDetailsResponse,
            EGCSystemMsg::k_EGCMsgGetPersonaNames,
            EGCSystemMsg::k_EGCMsgGetPersonaNamesResponse,
            EGCSystemMsg::k_EGCMsgMultiplexMsg,
            EGCSystemMsg::k_EGCMsgMultiplexMsgResponse,
            EGCSystemMsg::k_EGCMsgWebAPIRegisterInterfaces,
            EGCSystemMsg::k_EGCMsgWebAPIJobRequest,
            EGCSystemMsg::k_EGCMsgWebAPIJobRequestHttpResponse,
            EGCSystemMsg::k_EGCMsgWebAPIJobRequestForwardResponse,
            EGCSystemMsg::k_EGCMsgMemCachedGet,
            EGCSystemMsg::k_EGCMsgMemCachedGetResponse,
            EGCSystemMsg::k_EGCMsgMemCachedSet,
            EGCSystemMsg::k_EGCMsgMemCachedDelete,
            EGCSystemMsg::k_EGCMsgMemCachedStats,
            EGCSystemMsg::k_EGCMsgMemCachedStatsResponse,
            EGCSystemMsg::k_EGCMsgMasterSetDirectory,
            EGCSystemMsg::k_EGCMsgMasterSetDirectoryResponse,
            EGCSystemMsg::k_EGCMsgMasterSetWebAPIRouting,
            EGCSystemMsg::k_EGCMsgMasterSetWebAPIRoutingResponse,
            EGCSystemMsg::k_EGCMsgMasterSetClientMsgRouting,
            EGCSystemMsg::k_EGCMsgMasterSetClientMsgRoutingResponse,
            EGCSystemMsg::k_EGCMsgSetOptions,
            EGCSystemMsg::k_EGCMsgSetOptionsResponse,
            EGCSystemMsg::k_EGCMsgSystemBase2,
            EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatus,
            EGCSystemMsg::k_EGCMsgGetPurchaseTrustStatusResponse,
            EGCSystemMsg::k_EGCMsgUpdateSession,
            EGCSystemMsg::k_EGCMsgGCAccountVacStatusChange,
            EGCSystemMsg::k_EGCMsgCheckFriendship,
            EGCSystemMsg::k_EGCMsgCheckFriendshipResponse,
            EGCSystemMsg::k_EGCMsgGetPartnerAccountLink,
            EGCSystemMsg::k_EGCMsgGetPartnerAccountLinkResponse,
            EGCSystemMsg::k_EGCMsgDPPartnerMicroTxns,
            EGCSystemMsg::k_EGCMsgDPPartnerMicroTxnsResponse,
            EGCSystemMsg::k_EGCMsgVacVerificationChange,
            EGCSystemMsg::k_EGCMsgAccountPhoneNumberChange,
            EGCSystemMsg::k_EGCMsgInviteUserToLobby,
            EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesRequest,
            EGCSystemMsg::k_EGCMsgGetGamePersonalDataCategoriesResponse,
            EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesRequest,
            EGCSystemMsg::k_EGCMsgGetGamePersonalDataEntriesResponse,
            EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesRequest,
            EGCSystemMsg::k_EGCMsgTerminateGamePersonalDataEntriesResponse,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EGCSystemMsg>("EGCSystemMsg", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EGCSystemMsg {
}

impl ::std::default::Default for EGCSystemMsg {
    fn default() -> Self {
        EGCSystemMsg::k_EGCMsgInvalid
    }
}

impl ::protobuf::reflect::ProtobufValue for EGCSystemMsg {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ESOMsg {
    k_ESOMsg_Create = 21,
    k_ESOMsg_Update = 22,
    k_ESOMsg_Destroy = 23,
    k_ESOMsg_CacheSubscribed = 24,
    k_ESOMsg_CacheUnsubscribed = 25,
    k_ESOMsg_UpdateMultiple = 26,
    k_ESOMsg_CacheSubscriptionCheck = 27,
    k_ESOMsg_CacheSubscriptionRefresh = 28,
}

impl ::protobuf::ProtobufEnum for ESOMsg {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ESOMsg> {
        match value {
            21 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_Create),
            22 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_Update),
            23 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_Destroy),
            24 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscribed),
            25 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheUnsubscribed),
            26 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_UpdateMultiple),
            27 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscriptionCheck),
            28 => ::std::option::Option::Some(ESOMsg::k_ESOMsg_CacheSubscriptionRefresh),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ESOMsg] = &[
            ESOMsg::k_ESOMsg_Create,
            ESOMsg::k_ESOMsg_Update,
            ESOMsg::k_ESOMsg_Destroy,
            ESOMsg::k_ESOMsg_CacheSubscribed,
            ESOMsg::k_ESOMsg_CacheUnsubscribed,
            ESOMsg::k_ESOMsg_UpdateMultiple,
            ESOMsg::k_ESOMsg_CacheSubscriptionCheck,
            ESOMsg::k_ESOMsg_CacheSubscriptionRefresh,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ESOMsg>("ESOMsg", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ESOMsg {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for ESOMsg {
    fn default() -> Self {
        ESOMsg::k_ESOMsg_Create
    }
}

impl ::protobuf::reflect::ProtobufValue for ESOMsg {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EGCBaseClientMsg {
    k_EMsgGCClientWelcome = 4004,
    k_EMsgGCServerWelcome = 4005,
    k_EMsgGCClientHello = 4006,
    k_EMsgGCServerHello = 4007,
    k_EMsgGCClientConnectionStatus = 4009,
    k_EMsgGCServerConnectionStatus = 4010,
    k_EMsgGCClientHelloPartner = 4011,
    k_EMsgGCClientHelloPW = 4012,
    k_EMsgGCClientHelloR2 = 4013,
    k_EMsgGCClientHelloR3 = 4014,
    k_EMsgGCClientHelloR4 = 4015,
}

impl ::protobuf::ProtobufEnum for EGCBaseClientMsg {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCBaseClientMsg> {
        match value {
            4004 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientWelcome),
            4005 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCServerWelcome),
            4006 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientHello),
            4007 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCServerHello),
            4009 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientConnectionStatus),
            4010 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCServerConnectionStatus),
            4011 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientHelloPartner),
            4012 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientHelloPW),
            4013 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientHelloR2),
            4014 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientHelloR3),
            4015 => ::std::option::Option::Some(EGCBaseClientMsg::k_EMsgGCClientHelloR4),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EGCBaseClientMsg] = &[
            EGCBaseClientMsg::k_EMsgGCClientWelcome,
            EGCBaseClientMsg::k_EMsgGCServerWelcome,
            EGCBaseClientMsg::k_EMsgGCClientHello,
            EGCBaseClientMsg::k_EMsgGCServerHello,
            EGCBaseClientMsg::k_EMsgGCClientConnectionStatus,
            EGCBaseClientMsg::k_EMsgGCServerConnectionStatus,
            EGCBaseClientMsg::k_EMsgGCClientHelloPartner,
            EGCBaseClientMsg::k_EMsgGCClientHelloPW,
            EGCBaseClientMsg::k_EMsgGCClientHelloR2,
            EGCBaseClientMsg::k_EMsgGCClientHelloR3,
            EGCBaseClientMsg::k_EMsgGCClientHelloR4,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EGCBaseClientMsg>("EGCBaseClientMsg", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EGCBaseClientMsg {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EGCBaseClientMsg {
    fn default() -> Self {
        EGCBaseClientMsg::k_EMsgGCClientWelcome
    }
}

impl ::protobuf::reflect::ProtobufValue for EGCBaseClientMsg {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EGCToGCMsg {
    k_EGCToGCMsgMasterAck = 150,
    k_EGCToGCMsgMasterAckResponse = 151,
    k_EGCToGCMsgRouted = 152,
    k_EGCToGCMsgRoutedReply = 153,
    k_EMsgUpdateSessionIP = 154,
    k_EMsgRequestSessionIP = 155,
    k_EMsgRequestSessionIPResponse = 156,
    k_EGCToGCMsgMasterStartupComplete = 157,
}

impl ::protobuf::ProtobufEnum for EGCToGCMsg {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCToGCMsg> {
        match value {
            150 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgMasterAck),
            151 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgMasterAckResponse),
            152 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgRouted),
            153 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgRoutedReply),
            154 => ::std::option::Option::Some(EGCToGCMsg::k_EMsgUpdateSessionIP),
            155 => ::std::option::Option::Some(EGCToGCMsg::k_EMsgRequestSessionIP),
            156 => ::std::option::Option::Some(EGCToGCMsg::k_EMsgRequestSessionIPResponse),
            157 => ::std::option::Option::Some(EGCToGCMsg::k_EGCToGCMsgMasterStartupComplete),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EGCToGCMsg] = &[
            EGCToGCMsg::k_EGCToGCMsgMasterAck,
            EGCToGCMsg::k_EGCToGCMsgMasterAckResponse,
            EGCToGCMsg::k_EGCToGCMsgRouted,
            EGCToGCMsg::k_EGCToGCMsgRoutedReply,
            EGCToGCMsg::k_EMsgUpdateSessionIP,
            EGCToGCMsg::k_EMsgRequestSessionIP,
            EGCToGCMsg::k_EMsgRequestSessionIPResponse,
            EGCToGCMsg::k_EGCToGCMsgMasterStartupComplete,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EGCToGCMsg>("EGCToGCMsg", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EGCToGCMsg {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EGCToGCMsg {
    fn default() -> Self {
        EGCToGCMsg::k_EGCToGCMsgMasterAck
    }
}

impl ::protobuf::reflect::ProtobufValue for EGCToGCMsg {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ECommunityItemClass {
    k_ECommunityItemClass_Invalid = 0,
    k_ECommunityItemClass_Badge = 1,
    k_ECommunityItemClass_GameCard = 2,
    k_ECommunityItemClass_ProfileBackground = 3,
    k_ECommunityItemClass_Emoticon = 4,
    k_ECommunityItemClass_BoosterPack = 5,
    k_ECommunityItemClass_Consumable = 6,
    k_ECommunityItemClass_GameGoo = 7,
    k_ECommunityItemClass_ProfileModifier = 8,
    k_ECommunityItemClass_Scene = 9,
    k_ECommunityItemClass_SalienItem = 10,
}

impl ::protobuf::ProtobufEnum for ECommunityItemClass {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ECommunityItemClass> {
        match value {
            0 => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_Invalid),
            1 => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_Badge),
            2 => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_GameCard),
            3 => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_ProfileBackground),
            4 => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_Emoticon),
            5 => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_BoosterPack),
            6 => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_Consumable),
            7 => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_GameGoo),
            8 => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_ProfileModifier),
            9 => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_Scene),
            10 => ::std::option::Option::Some(ECommunityItemClass::k_ECommunityItemClass_SalienItem),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ECommunityItemClass] = &[
            ECommunityItemClass::k_ECommunityItemClass_Invalid,
            ECommunityItemClass::k_ECommunityItemClass_Badge,
            ECommunityItemClass::k_ECommunityItemClass_GameCard,
            ECommunityItemClass::k_ECommunityItemClass_ProfileBackground,
            ECommunityItemClass::k_ECommunityItemClass_Emoticon,
            ECommunityItemClass::k_ECommunityItemClass_BoosterPack,
            ECommunityItemClass::k_ECommunityItemClass_Consumable,
            ECommunityItemClass::k_ECommunityItemClass_GameGoo,
            ECommunityItemClass::k_ECommunityItemClass_ProfileModifier,
            ECommunityItemClass::k_ECommunityItemClass_Scene,
            ECommunityItemClass::k_ECommunityItemClass_SalienItem,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ECommunityItemClass>("ECommunityItemClass", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ECommunityItemClass {
}

impl ::std::default::Default for ECommunityItemClass {
    fn default() -> Self {
        ECommunityItemClass::k_ECommunityItemClass_Invalid
    }
}

impl ::protobuf::reflect::ProtobufValue for ECommunityItemClass {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ECommunityItemAttribute {
    k_ECommunityItemAttribute_Invalid = 0,
    k_ECommunityItemAttribute_CardBorder = 1,
    k_ECommunityItemAttribute_Level = 2,
    k_ECommunityItemAttribute_IssueNumber = 3,
    k_ECommunityItemAttribute_TradableTime = 4,
    k_ECommunityItemAttribute_StorePackageID = 5,
    k_ECommunityItemAttribute_CommunityItemAppID = 6,
    k_ECommunityItemAttribute_CommunityItemType = 7,
    k_ECommunityItemAttribute_ProfileModiferEnabled = 8,
    k_ECommunityItemAttribute_ExpiryTime = 9,
}

impl ::protobuf::ProtobufEnum for ECommunityItemAttribute {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ECommunityItemAttribute> {
        match value {
            0 => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_Invalid),
            1 => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_CardBorder),
            2 => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_Level),
            3 => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_IssueNumber),
            4 => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_TradableTime),
            5 => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_StorePackageID),
            6 => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_CommunityItemAppID),
            7 => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_CommunityItemType),
            8 => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_ProfileModiferEnabled),
            9 => ::std::option::Option::Some(ECommunityItemAttribute::k_ECommunityItemAttribute_ExpiryTime),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ECommunityItemAttribute] = &[
            ECommunityItemAttribute::k_ECommunityItemAttribute_Invalid,
            ECommunityItemAttribute::k_ECommunityItemAttribute_CardBorder,
            ECommunityItemAttribute::k_ECommunityItemAttribute_Level,
            ECommunityItemAttribute::k_ECommunityItemAttribute_IssueNumber,
            ECommunityItemAttribute::k_ECommunityItemAttribute_TradableTime,
            ECommunityItemAttribute::k_ECommunityItemAttribute_StorePackageID,
            ECommunityItemAttribute::k_ECommunityItemAttribute_CommunityItemAppID,
            ECommunityItemAttribute::k_ECommunityItemAttribute_CommunityItemType,
            ECommunityItemAttribute::k_ECommunityItemAttribute_ProfileModiferEnabled,
            ECommunityItemAttribute::k_ECommunityItemAttribute_ExpiryTime,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ECommunityItemAttribute>("ECommunityItemAttribute", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ECommunityItemAttribute {
}

impl ::std::default::Default for ECommunityItemAttribute {
    fn default() -> Self {
        ECommunityItemAttribute::k_ECommunityItemAttribute_Invalid
    }
}

impl ::protobuf::reflect::ProtobufValue for ECommunityItemAttribute {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12gcsystemmsgs.proto\"o\n\x1cCMsgGCHVacVerificationChange\x12\x18\n\
    \x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12\x14\n\x05appid\x18\x02\
    \x20\x01(\rR\x05appid\x12\x1f\n\x0bis_verified\x18\x03\x20\x01(\x08R\nis\
    Verified\"\xb4\x01\n\x1fCMsgGCHAccountPhoneNumberChange\x12\x18\n\x07ste\
    amid\x18\x01\x20\x01(\x06R\x07steamid\x12\x14\n\x05appid\x18\x02\x20\x01\
    (\rR\x05appid\x12\x19\n\x08phone_id\x18\x03\x20\x01(\x04R\x07phoneId\x12\
    \x1f\n\x0bis_verified\x18\x04\x20\x01(\x08R\nisVerified\x12%\n\x0eis_ide\
    ntifying\x18\x05\x20\x01(\x08R\risIdentifying\"\x98\x01\n\x18CMsgGCHInvi\
    teUserToLobby\x12\x18\n\x07steamid\x18\x01\x20\x01(\x06R\x07steamid\x12\
    \x14\n\x05appid\x18\x02\x20\x01(\rR\x05appid\x12'\n\x0fsteamid_invited\
    \x18\x03\x20\x01(\x06R\x0esteamidInvited\x12#\n\rsteamid_lobby\x18\x04\
    \x20\x01(\x06R\x0csteamidLobby\"\x92\x03\n1CQuest_PublisherAddCommunityI\
    temsToPlayer_Request\x12\x18\n\x07steamid\x18\x01\x20\x01(\x04R\x07steam\
    id\x12\x14\n\x05appid\x18\x02\x20\x01(\rR\x05appid\x12&\n\x0fmatch_item_\
    type\x18\x03\x20\x01(\rR\rmatchItemType\x12(\n\x10match_item_class\x18\
    \x04\x20\x01(\rR\x0ematchItemClass\x12(\n\x10prefix_item_name\x18\x05\
    \x20\x01(\tR\x0eprefixItemName\x12\\\n\nattributes\x18\x06\x20\x03(\x0b2\
    <.CQuest_PublisherAddCommunityItemsToPlayer_Request.AttributeR\nattribut\
    es\x12\x12\n\x04note\x18\x07\x20\x01(\tR\x04note\x1a?\n\tAttribute\x12\
    \x1c\n\tattribute\x18\x01\x20\x01(\rR\tattribute\x12\x14\n\x05value\x18\
    \x02\x20\x01(\x04R\x05value\"~\n2CQuest_PublisherAddCommunityItemsToPlay\
    er_Response\x12#\n\ritems_matched\x18\x01\x20\x01(\rR\x0citemsMatched\
    \x12#\n\ritems_granted\x18\x02\x20\x01(\rR\x0citemsGranted\"\x91\x01\n'C\
    Community_GamePersonalDataCategoryInfo\x12\x12\n\x04type\x18\x01\x20\x01\
    (\tR\x04type\x12-\n\x12localization_token\x18\x02\x20\x01(\tR\x11localiz\
    ationToken\x12#\n\rtemplate_file\x18\x03\x20\x01(\tR\x0ctemplateFile\"H\
    \n0CCommunity_GetGamePersonalDataCategories_Request\x12\x14\n\x05appid\
    \x18\x01\x20\x01(\rR\x05appid\"\xad\x01\n1CCommunity_GetGamePersonalData\
    Categories_Response\x12H\n\ncategories\x18\x01\x20\x03(\x0b2(.CCommunity\
    _GamePersonalDataCategoryInfoR\ncategories\x12.\n\x13app_assets_basename\
    \x18\x02\x20\x01(\tR\x11appAssetsBasename\"\x9a\x01\n-CCommunity_GetGame\
    PersonalDataEntries_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05ap\
    pid\x12\x18\n\x07steamid\x18\x02\x20\x01(\x04R\x07steamid\x12\x12\n\x04t\
    ype\x18\x03\x20\x01(\tR\x04type\x12%\n\x0econtinue_token\x18\x04\x20\x01\
    (\tR\rcontinueToken\"\x8f\x01\n.CCommunity_GetGamePersonalDataEntries_Re\
    sponse\x12\x1c\n\tgceresult\x18\x01\x20\x01(\rR\tgceresult\x12\x18\n\x07\
    entries\x18\x02\x20\x03(\tR\x07entries\x12%\n\x0econtinue_token\x18\x03\
    \x20\x01(\tR\rcontinueToken\"e\n3CCommunity_TerminateGamePersonalDataEnt\
    ries_Request\x12\x14\n\x05appid\x18\x01\x20\x01(\rR\x05appid\x12\x18\n\
    \x07steamid\x18\x02\x20\x01(\x04R\x07steamid\"T\n4CCommunity_TerminateGa\
    mePersonalDataEntries_Response\x12\x1c\n\tgceresult\x18\x01\x20\x01(\rR\
    \tgceresult*\xc6\x17\n\x0cEGCSystemMsg\x12\x13\n\x0fk_EGCMsgInvalid\x10\
    \0\x12\x11\n\rk_EGCMsgMulti\x10\x01\x12\x18\n\x14k_EGCMsgGenericReply\
    \x10\n\x12\x16\n\x12k_EGCMsgSystemBase\x102\x12\x1e\n\x1ak_EGCMsgAchieve\
    mentAwarded\x103\x12\x16\n\x12k_EGCMsgConCommand\x104\x12\x18\n\x14k_EGC\
    MsgStartPlaying\x105\x12\x17\n\x13k_EGCMsgStopPlaying\x106\x12\x1b\n\x17\
    k_EGCMsgStartGameserver\x107\x12\x1a\n\x16k_EGCMsgStopGameserver\x108\
    \x12\x15\n\x11k_EGCMsgWGRequest\x109\x12\x16\n\x12k_EGCMsgWGResponse\x10\
    :\x12\"\n\x1ek_EGCMsgGetUserGameStatsSchema\x10;\x12*\n&k_EGCMsgGetUserG\
    ameStatsSchemaResponse\x10<\x12\"\n\x1ek_EGCMsgGetUserStatsDEPRECATED\
    \x10=\x12\x20\n\x1ck_EGCMsgGetUserStatsResponse\x10>\x12\x1a\n\x16k_EGCM\
    sgAppInfoUpdated\x10?\x12\x1b\n\x17k_EGCMsgValidateSession\x10@\x12#\n\
    \x1fk_EGCMsgValidateSessionResponse\x10A\x12\"\n\x1ek_EGCMsgLookupAccoun\
    tFromInput\x10B\x12\x1b\n\x17k_EGCMsgSendHTTPRequest\x10C\x12#\n\x1fk_EG\
    CMsgSendHTTPRequestResponse\x10D\x12\x18\n\x14k_EGCMsgPreTestSetup\x10E\
    \x12\x1f\n\x1bk_EGCMsgRecordSupportAction\x10F\x12(\n$k_EGCMsgGetAccount\
    Details_DEPRECATED\x10G\x12\"\n\x1ek_EGCMsgReceiveInterAppMessage\x10I\
    \x12\x18\n\x14k_EGCMsgFindAccounts\x10J\x12\x15\n\x11k_EGCMsgPostAlert\
    \x10K\x12\x17\n\x13k_EGCMsgGetLicenses\x10L\x12\x18\n\x14k_EGCMsgGetUser\
    Stats\x10M\x12\x17\n\x13k_EGCMsgGetCommands\x10N\x12\x1f\n\x1bk_EGCMsgGe\
    tCommandsResponse\x10O\x12\x1a\n\x16k_EGCMsgAddFreeLicense\x10P\x12\"\n\
    \x1ek_EGCMsgAddFreeLicenseResponse\x10Q\x12\x19\n\x15k_EGCMsgGetIPLocati\
    on\x10R\x12!\n\x1dk_EGCMsgGetIPLocationResponse\x10S\x12\x1d\n\x19k_EGCM\
    sgSystemStatsSchema\x10T\x12\x1a\n\x16k_EGCMsgGetSystemStats\x10U\x12\"\
    \n\x1ek_EGCMsgGetSystemStatsResponse\x10V\x12\x15\n\x11k_EGCMsgSendEmail\
    \x10W\x12\x1d\n\x19k_EGCMsgSendEmailResponse\x10X\x12\x1c\n\x18k_EGCMsgG\
    etEmailTemplate\x10Y\x12$\n\x20k_EGCMsgGetEmailTemplateResponse\x10Z\x12\
    \x1a\n\x16k_EGCMsgGrantGuestPass\x10[\x12\"\n\x1ek_EGCMsgGrantGuestPassR\
    esponse\x10\\\x12\x1d\n\x19k_EGCMsgGetAccountDetails\x10]\x12%\n!k_EGCMs\
    gGetAccountDetailsResponse\x10^\x12\x1b\n\x17k_EGCMsgGetPersonaNames\x10\
    _\x12#\n\x1fk_EGCMsgGetPersonaNamesResponse\x10`\x12\x18\n\x14k_EGCMsgMu\
    ltiplexMsg\x10a\x12\x20\n\x1ck_EGCMsgMultiplexMsgResponse\x10b\x12$\n\
    \x20k_EGCMsgWebAPIRegisterInterfaces\x10e\x12\x1c\n\x18k_EGCMsgWebAPIJob\
    Request\x10f\x12(\n$k_EGCMsgWebAPIJobRequestHttpResponse\x10h\x12+\n'k_E\
    GCMsgWebAPIJobRequestForwardResponse\x10i\x12\x19\n\x14k_EGCMsgMemCached\
    Get\x10\xc8\x01\x12!\n\x1ck_EGCMsgMemCachedGetResponse\x10\xc9\x01\x12\
    \x19\n\x14k_EGCMsgMemCachedSet\x10\xca\x01\x12\x1c\n\x17k_EGCMsgMemCache\
    dDelete\x10\xcb\x01\x12\x1b\n\x16k_EGCMsgMemCachedStats\x10\xcc\x01\x12#\
    \n\x1ek_EGCMsgMemCachedStatsResponse\x10\xcd\x01\x12\x1f\n\x1ak_EGCMsgMa\
    sterSetDirectory\x10\xdc\x01\x12'\n\"k_EGCMsgMasterSetDirectoryResponse\
    \x10\xdd\x01\x12#\n\x1ek_EGCMsgMasterSetWebAPIRouting\x10\xde\x01\x12+\n\
    &k_EGCMsgMasterSetWebAPIRoutingResponse\x10\xdf\x01\x12&\n!k_EGCMsgMaste\
    rSetClientMsgRouting\x10\xe0\x01\x12.\n)k_EGCMsgMasterSetClientMsgRoutin\
    gResponse\x10\xe1\x01\x12\x17\n\x12k_EGCMsgSetOptions\x10\xe2\x01\x12\
    \x1f\n\x1ak_EGCMsgSetOptionsResponse\x10\xe3\x01\x12\x18\n\x13k_EGCMsgSy\
    stemBase2\x10\xf4\x03\x12#\n\x1ek_EGCMsgGetPurchaseTrustStatus\x10\xf5\
    \x03\x12+\n&k_EGCMsgGetPurchaseTrustStatusResponse\x10\xf6\x03\x12\x1a\n\
    \x15k_EGCMsgUpdateSession\x10\xf7\x03\x12%\n\x20k_EGCMsgGCAccountVacStat\
    usChange\x10\xf8\x03\x12\x1c\n\x17k_EGCMsgCheckFriendship\x10\xf9\x03\
    \x12$\n\x1fk_EGCMsgCheckFriendshipResponse\x10\xfa\x03\x12\"\n\x1dk_EGCM\
    sgGetPartnerAccountLink\x10\xfb\x03\x12*\n%k_EGCMsgGetPartnerAccountLink\
    Response\x10\xfc\x03\x12\x1f\n\x1ak_EGCMsgDPPartnerMicroTxns\x10\x80\x04\
    \x12'\n\"k_EGCMsgDPPartnerMicroTxnsResponse\x10\x81\x04\x12\"\n\x1dk_EGC\
    MsgVacVerificationChange\x10\x86\x04\x12%\n\x20k_EGCMsgAccountPhoneNumbe\
    rChange\x10\x87\x04\x12\x1e\n\x19k_EGCMsgInviteUserToLobby\x10\x8b\x04\
    \x121\n,k_EGCMsgGetGamePersonalDataCategoriesRequest\x10\x8c\x04\x122\n-\
    k_EGCMsgGetGamePersonalDataCategoriesResponse\x10\x8d\x04\x12.\n)k_EGCMs\
    gGetGamePersonalDataEntriesRequest\x10\x8e\x04\x12/\n*k_EGCMsgGetGamePer\
    sonalDataEntriesResponse\x10\x8f\x04\x124\n/k_EGCMsgTerminateGamePersona\
    lDataEntriesRequest\x10\x90\x04\x125\n0k_EGCMsgTerminateGamePersonalData\
    EntriesResponse\x10\x91\x04*\xef\x01\n\x06ESOMsg\x12\x13\n\x0fk_ESOMsg_C\
    reate\x10\x15\x12\x13\n\x0fk_ESOMsg_Update\x10\x16\x12\x14\n\x10k_ESOMsg\
    _Destroy\x10\x17\x12\x1c\n\x18k_ESOMsg_CacheSubscribed\x10\x18\x12\x1e\n\
    \x1ak_ESOMsg_CacheUnsubscribed\x10\x19\x12\x1b\n\x17k_ESOMsg_UpdateMulti\
    ple\x10\x1a\x12#\n\x1fk_ESOMsg_CacheSubscriptionCheck\x10\x1b\x12%\n!k_E\
    SOMsg_CacheSubscriptionRefresh\x10\x1c*\xd9\x02\n\x10EGCBaseClientMsg\
    \x12\x1a\n\x15k_EMsgGCClientWelcome\x10\xa4\x1f\x12\x1a\n\x15k_EMsgGCSer\
    verWelcome\x10\xa5\x1f\x12\x18\n\x13k_EMsgGCClientHello\x10\xa6\x1f\x12\
    \x18\n\x13k_EMsgGCServerHello\x10\xa7\x1f\x12#\n\x1ek_EMsgGCClientConnec\
    tionStatus\x10\xa9\x1f\x12#\n\x1ek_EMsgGCServerConnectionStatus\x10\xaa\
    \x1f\x12\x1f\n\x1ak_EMsgGCClientHelloPartner\x10\xab\x1f\x12\x1a\n\x15k_\
    EMsgGCClientHelloPW\x10\xac\x1f\x12\x1a\n\x15k_EMsgGCClientHelloR2\x10\
    \xad\x1f\x12\x1a\n\x15k_EMsgGCClientHelloR3\x10\xae\x1f\x12\x1a\n\x15k_E\
    MsgGCClientHelloR4\x10\xaf\x1f*\x89\x02\n\nEGCToGCMsg\x12\x1a\n\x15k_EGC\
    ToGCMsgMasterAck\x10\x96\x01\x12\"\n\x1dk_EGCToGCMsgMasterAckResponse\
    \x10\x97\x01\x12\x17\n\x12k_EGCToGCMsgRouted\x10\x98\x01\x12\x1c\n\x17k_\
    EGCToGCMsgRoutedReply\x10\x99\x01\x12\x1a\n\x15k_EMsgUpdateSessionIP\x10\
    \x9a\x01\x12\x1b\n\x16k_EMsgRequestSessionIP\x10\x9b\x01\x12#\n\x1ek_EMs\
    gRequestSessionIPResponse\x10\x9c\x01\x12&\n!k_EGCToGCMsgMasterStartupCo\
    mplete\x10\x9d\x01*\xb0\x03\n\x13ECommunityItemClass\x12!\n\x1dk_ECommun\
    ityItemClass_Invalid\x10\0\x12\x1f\n\x1bk_ECommunityItemClass_Badge\x10\
    \x01\x12\"\n\x1ek_ECommunityItemClass_GameCard\x10\x02\x12+\n'k_ECommuni\
    tyItemClass_ProfileBackground\x10\x03\x12\"\n\x1ek_ECommunityItemClass_E\
    moticon\x10\x04\x12%\n!k_ECommunityItemClass_BoosterPack\x10\x05\x12$\n\
    \x20k_ECommunityItemClass_Consumable\x10\x06\x12!\n\x1dk_ECommunityItemC\
    lass_GameGoo\x10\x07\x12)\n%k_ECommunityItemClass_ProfileModifier\x10\
    \x08\x12\x1f\n\x1bk_ECommunityItemClass_Scene\x10\t\x12$\n\x20k_ECommuni\
    tyItemClass_SalienItem\x10\n*\xd6\x03\n\x17ECommunityItemAttribute\x12%\
    \n!k_ECommunityItemAttribute_Invalid\x10\0\x12(\n$k_ECommunityItemAttrib\
    ute_CardBorder\x10\x01\x12#\n\x1fk_ECommunityItemAttribute_Level\x10\x02\
    \x12)\n%k_ECommunityItemAttribute_IssueNumber\x10\x03\x12*\n&k_ECommunit\
    yItemAttribute_TradableTime\x10\x04\x12,\n(k_ECommunityItemAttribute_Sto\
    rePackageID\x10\x05\x120\n,k_ECommunityItemAttribute_CommunityItemAppID\
    \x10\x06\x12/\n+k_ECommunityItemAttribute_CommunityItemType\x10\x07\x123\
    \n/k_ECommunityItemAttribute_ProfileModiferEnabled\x10\x08\x12(\n$k_ECom\
    munityItemAttribute_ExpiryTime\x10\tB\x05H\x01\x80\x01\0\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
